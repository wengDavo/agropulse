const analyzeButton = document.querySelector("#analyzeButton");
const targetSite = document.querySelector("#targetSite span");
const generatedSite = document.querySelector("#generatedSite");

let siteIsAnalyzed = false;
const backendURL = "http://localhost:8080";

analyzeButton.addEventListener("click", async () => {
	const [tab] = await browser.tabs.query({ active: true, currentWindow: true });
	let extractedPage;

	if (!tab || !tab.id) {
		console.error("No active tab found.");
		return;
	}

	// send a message to the content_script which extracts the page and sends it back
	try {
		console.log("Sending message to extract page ...");
		extractedPage = await browser.tabs.sendMessage(tab.id, { action: "analyze" });
		console.log("PAGE:", extractedPage)
		console.log("Extracting page HTML ...");
		analyzeButton.textContent = "Analyzed";
		analyzeButton.style.backgroundColor = "green"
		siteIsAnalyzed = true;
		targetSite.textContent = `${tab.title}`
	} catch (error) {
		analyzeButton.textContent = "failed";
		console.error(error)
	}

	// send data to backend
	// backend sends a copy of the site we analyzed
	try {
		const response = await fetch(backendURL,
			{
				method: "POST",
				// headers not working
				headers: {
					"Content-Type": 'text/plain'
				},
				body: extractedPage.toString()
			}
		)

		if (!response.ok) {
			throw new Error(`Response status: ${response.status}`);
		}

		const { generatedURL } = await response.json()
		generatedSite.setAttribute("href", `${generatedURL}`)
	} catch (error) {
		targetSite.textContent = `Failed to connect to ${tab.title}`
		analyzeButton.textContent = "failed";
		console.error(error, error.message)
	}

	// get edited site from backend and update the page without refreshing
//	try {
//		editedPage = await browser.tabs.sendMessage(tab.id, { action: "edited" });
//	} catch (error) {
//		console.error(error, error.message)
//	}

});

